Sat 26 Feb 2022 08:38:58 AM CST

install cypress

`npm install cypress` and head to 
https://docs.cypress.io/guides/getting-started/installing-cypress

open with npx cypress open

Create a new test file. This is the first time I've ever used Cypress so I'm just following along with their documentation. They provide a lot of different examples right out of the box for different testing scenarios (testing navigations, interacting with brower local store, and so on).

So I create my new file, play_world_spec.js. I don't know if they're using Jasmine (verify) but their syntax is very Jasmine-ish. If you've used Jasmine at all, you'll be very comfortable. Update, it uses Mocha and Chai.

You can pick typescript or javascript, I went with javascript to keep it simple. I double clicked my new spec file and Cyrpress launched in Chrome. There are no tests in the file so it suggested I open the spec in my favorite text editor. 

My spec file looked like this:

// play_wordle_spec.js created with Cypress
//
// Start writing your Cypress tests below!
// If you're unfamiliar with how Cypress works,
// check out the link below and learn how to write your first test:
// https://on.cypress.io/writing-first-test

And after entering the sample test that doesn't do much:

describe('My First Test', () => {
  it('Does not do much!', () => {
    expect(true).to.equal(false)
  })
})


I quickly get my results:

screenshot 1

I don't know if this is relevant. Maybe you just want to skip to the good parts.

First things first, I loaded wordle. I didn't know if this scheme was going to work, so I was glad to see wordle load up in the test runner

it('Should load Wordle!', () => {
    cy.visit('https://www.nytimes.com/games/wordle/index.html');
});

screenshot 2

There is a pesky instruction modal that pops up on page load, so that has to be closed.

Wordle is written using the little understood and spooky shadow DOM, so I couldn't use regular query selectors to find the buttons.

Luckily cypress got my back with some shadow syntax.

https://docs.cypress.io/api/commands/shadow#Syntax

cypress waits if things aren't found right away, so you don't have to worry so much about loading types and waiting for little animations to finish.

I had to add this to the cypress.json config to go so deep on nested shadow doms

dumb person's regex for 5 letter words
^[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]$

first word pick is a random one in the list that has no repeated letters

the dictionary im trying for step one seems to be full of nonsense but i'll try it anyway

working with cypress to do a bunch of stuff sequentially is a pain since everything seems to be asynchronous, waiting for things to happen, retrying if it hasn't happened yet

word list pulled from js bundle loaded on world
